url_test="https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
download.file(url_train,destfile="pml_train.csv")
download.file(url_test,destfile="pml_test.csv")
library(readr)
training <- read.csv("pml_train.csv",na.strings = c("NA", "#DIV/0!", ""))
testing <- read.csv("pml_test.csv",na.strings = c("NA", "#DIV/0!", ""))
inTrain <- createDataPartition(training$classe, p = 0.7, list = FALSE)
subTraining <- training[inTrain, ]
subTesting <- training[-inTrain, ]
subTraining <- subTraining[, -c(1:7)]
subTraining_tidy <- subTraining
for (i in 1:length(subTraining))
{
if(sum(is.na(subTraining[, i]))/ nrow(subTraining) >= .5)
{
for (j in 1:length(subTraining_tidy))
{
if(length(grep(names(subTraining[i]), names(subTraining_tidy)[j])) == 1)
{
subTraining_tidy <- subTraining_tidy[, -j]
}
}
}
}
subTraining <- subTraining_tidy
tidya <- colnames(subTraining)
subTesting <- subTesting[tidya]
tidyb <- colnames(subTraining[, -53])
testing <- testing[tidyb]
fit_rf <- randomForest(classe ~., data = subTraining)
pred_rf <- predict(fit_rf, subTesting)
cm_rf <- confusionMatrix(pred_rf, subTesting$classe)
print(cm_rf)
plot(fit_rf)
fit_dt <- rpart(classe ~., data = subTraining)
pred_dt <- predict(fit_dt, subTesting, type = "class")
cm_dt <- confusionMatrix(pred_dt, subTesting$classe)
print(cm_dt)
finalPred <- predict(fit_rf, testing)
print(finalPred)
shiny::runApp('C:/Users/dabradford/OneDrive - Cox Automotive/Coursera/DataSci/Data Products/Shiny/myApp')
runApp('C:/Users/dabradford/OneDrive - Cox Automotive/Coursera/DataSci/Data Products/Shiny/myApp')
runApp('C:/Users/dabradford/OneDrive - Cox Automotive/Coursera/DataSci/Data Products/Shiny/myApp')
runApp('C:/Users/dabradford/OneDrive - Cox Automotive/Coursera/DataSci/Data Products/Shiny/myApp')
runApp('C:/Users/dabradford/OneDrive - Cox Automotive/Coursera/DataSci/Data Products/Shiny/myApp')
shiny::runApp('C:/Users/dabradford/OneDrive - Cox Automotive/Coursera/DataSci/Data Products/Shiny/hp')
runApp('C:/Users/dabradford/OneDrive - Cox Automotive/Coursera/DataSci/Data Products/Shiny/hp')
shiny::runApp('C:/Users/dabradford/OneDrive - Cox Automotive/Coursera/DataSci/Data Products/Shiny/hp')
install.packages("googlevis")
install.packages("googleVis")
knitr::opts_chunk$set(echo = TRUE)
suppressPackageStartupMessages(library(googleVis))
M <- gvisMotionChart(Fruits, "Fruit", "Year",
options=list(width=600, height=400))
print(M,"chart")
suppressPackageStartupMessages(library(googleVis))
M <- gvisMotionChart(Fruits, "Fruit", "Year",
options=list(width=600, height=400))
print(M,"chart")
View(M)
Fruits
suppressPackageStartupMessages(library(googleVis))
M <- gvisMotionChart(Fruits, "Fruit", "Year",
options=list(width=600, height=400))
print(M,"chart")
suppressPackageStartupMessages(library(googleVis))
M <- gvisMotionChart(Fruits, "Fruit", "Year",
options=list(width=600, height=400))
print(M,"chart")
plot(m)
plot(M)
plot(M)
plot(M)
library("googleVis"
library("googleVis"
library("googleVis")
plot(M)
demo(googleVis)
G <- gvisGeoChart(Exports, locationvar="Country",
colorvar="Profit",options=list(width=600, height=400))
print(G,"chart")
print(G)
G
Exports
plot(g)
plot(G)
G2 <- gvisGeoChart(Exports, locationvar="Country",
colorvar="Profit",options=list(width=600, height=400,region="150"))
print(G2,"chart")
plot(G2)
df <- data.frame(label=c("US", "GB", "BR"), val1=c(1,3,4), val2=c(23,12,32))
Line <- gvisLineChart(df, xvar="label", yvar=c("val1","val2"),
options=list(title="Hello World", legend="bottom",
titleTextStyle="{color:'red', fontSize:18}",
vAxis="{gridlines:{color:'red', count:3}}",
hAxis="{title:'My Label', titleTextStyle:{color:'blue'}}",
series="[{color:'green', targetAxisIndex: 0},
{color: 'blue',targetAxisIndex:1}]",
vAxes="[{title:'Value 1 (%)', format:'##,######%'},
{title:'Value 2 (\U00A3)'}]",
curveType="function", width=500, height=300
))
DF
df
plot(Line)
suppressPackageStartupMessages(library(googleVis))
M <- gvisMotionChart(Fruits, "Fruit", "Year",
options=list(width=600, height=400))
print(M,"chart")
plot(M)
G <- gvisGeoChart(Exports, "Country", "Profit",options=list(width=200, height=100))
T1 <- gvisTable(Exports,options=list(width=200, height=270))
M <- gvisMotionChart(Fruits, "Fruit", "Year", options=list(width=400, height=370))
GT <- gvisMerge(G,T1, horizontal=FALSE)
GTM <- gvisMerge(GT, M, horizontal=TRUE,tableOptions="bgcolor=\"#CCCCCC\" cellspacing=10")
print(GTM,"chart")
print(GTM,"chart")
plot(GTM)
install.packages("plotly")
library(plotly
library(plotly)
library(plotly)
plot_ly(mtcars, x = wt, y = mpg, mode = "markers")
plot_ly(mtcars, x = wt, y = mpg, mode = "markers")
library(plotly)
data(mtcars)
library(plotly)
data(mtcars)
plot_ly(mtcars, x = wt, y = mpg, mode = "markers")
library(plotly)
data(mtcars)
plot_ly(mtcars, x = wt, y = mpg, mode = "markers")
mtcars
library(plotly)
plot_ly(mtcars, x = wt, y = mpg, mode = "markers")
View(mtcars)
library(plotly)
plot_ly(mtcars, x = wt, y = mpg, mode = "markers")
library(plotly)
plot_ly(mtcars, x = wt, y = mpg, mode = "markers")
library(plotly)
data(mtcars)
plot_ly(mtcars, x = wt, y = mpg, mode = "markers")
library(plotly)
plot_ly(mtcars, x = wt, y = mpg, mode = "markers")
library(plotly)
data(mtcars)
plot_ly(mtcars, x = ~mpg, y = ~hp, mode="markers")
library(plotly)
data(mtcars)
plot_ly(mtcars, x = ~mpg, y = ~hp, mode="markers")
library(plotly)
library(tidyr)
library(dplyr)
install.packages("tidyr")
install.packages("tidyr")
install.packages("tidyr")
library(plotly)
library(tidyr)
library(dplyr)
library(plotly)
data(mtcars)
plot_ly(mtcars, x = ~mpg, y = ~hp, mode="markers")
library(plotly)
plot_ly(mtcars, x = wt, y = mpg, mode = "markers")
terrain2 >- matrix(sort(rnorm(100*100)), nrow = 100, ncol = 100)
terrain2 <- matrix(sort(rnorm(100*100)), nrow = 100, ncol = 100)
plot_ly(z = terrain2, type = "surface")
# Create data frame
state_pop <- data.frame(State = state.abb, Pop = as.vector(state.x77[,1]))
# Create hover text
state_pop$hover <- with(state_pop, paste(State, '<br>', "Population:", Pop))
# Make state borders white
borders <- list(color = toRGB("red"))
# Set up some mapping options
map_options <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showlakes = TRUE,
lakecolor = toRGB('white')
)
plot_ly(z = ~state_pop$Pop, text = ~state_pop$hover, locations = ~state_pop$State,
type = 'choropleth', locationmode = 'USA-states',
color = state_pop$Pop, colors = 'Blues', marker = list(line = borders)) %>%
layout(title = 'US Population in 1975', geo = map_options)
library(plotly)
plot_ly(mtcars, x = wt, y = mpg, mode = "markers")
terrain1 <- matrix(rnorm(100*100), nrow = 100, ncol = 100)
plot_ly(z = ~terrain1, type = "heatmap")
terrain2 <- matrix(sort(rnorm(100*100)), nrow = 100, ncol = 100)
plot_ly(z = terrain2, type = "surface")
# Create data frame
state_pop <- data.frame(State = state.abb, Pop = as.vector(state.x77[,1]))
# Create hover text
state_pop$hover <- with(state_pop, paste(State, '<br>', "Population:", Pop))
# Make state borders white
borders <- list(color = toRGB("red"))
# Set up some mapping options
map_options <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showlakes = TRUE,
lakecolor = toRGB('white')
)
plot_ly(z = ~state_pop$Pop, text = ~state_pop$hover, locations = ~state_pop$State,
type = 'choropleth', locationmode = 'USA-states',
color = state_pop$Pop, colors = 'Blues', marker = list(line = borders)) %>%
layout(title = 'US Population in 1975', geo = map_options)
set.seed(100)
d <- diamonds[sample(nrow(diamonds), 1000), ]
data(diamons)
data(diamonds)
library(plotly)
library(tidyr)
library(dplyr)
library(plotly)
library(tidyr)
library(dplyr)
library(plotly)
data(mtcars)
data("diamonds")
plot_ly(mtcars, x = ~mpg, y = ~hp, mode="markers")
set.seed(100)
d <- diamonds[sample(nrow(diamonds), 1000), ]
p <- ggplot(data = d, aes(x = carat, y = price)) +
geom_point(aes(text = paste("Clarity:", clarity)), size = 4) +
geom_smooth(aes(color = cut, fill = cut)) + facet_wrap(~ cut)
(gg <- ggplotly(p))
gg
plotly_post(gg)
plotly_POST(gg)
install.packages("github"
``
install.packages("github")
git
echo "# dp_wk2_slides" >> README.md
which git
git
git init
git init
git
library(leaflet)
my_map <- leaflet() %>%
addTiles()
my_map
library(leaflet)
my_map <- my_map %>%
addmarkers(lat=39.2980803, lng=76.5898801,
popup="Jeff Leek's Office")
my_map
library(leaflet)
my_map <- my_map %>%
addMarkers(lat=39.2980803, lng=76.5898801,
popup="Jeff Leek's Office")
my_map
library(leaflet)
my_map <- my_map %>%
addMarkers(lat=39.2980803, lng=-76.5898801,
popup="Jeff Leek's Office")
my_map
# Chunk 1
library(leaflet)
my_map <- leaflet() %>%
addTiles()
my_map
library(leaflet)
my_map <- my_map %>%
addMarkers(lat=39.2980803, lng=-76.5898801,
popup="Jeff Leek's Office")
my_map
library(leaflet)
my_map <- leaflet() %>%
addTiles() %>%
addMarkers(lat=39.2980803, lng=-76.5898801,
popup="Jeff Leek's Office")
my_map
set.seed(2019-08-26)
df <- data.frame(lat = runif(20, min = 39.2, max = 39.3),
lng = runif(20, min = -76.6, max = -76.5))
df
leaflet() %>%
addTiles() %>%
addMarkers()
set.seed(2019-08-26)
df <- data.frame(lat = runif(20, min = 39.2, max = 39.3),
lng = runif(20, min = -76.6, max = -76.5))
df %>%
leaflet() %>%
addTiles() %>%
addMarkers()
set.seed(2019-08-26)
df <- data.frame(lat = runif(20, min = 39.2, max = 39.3),
lng = runif(20, min = -76.6, max = -76.5))
df %>%
leaflet() %>%
addTiles() %>%
addMarkers()
set.seed(2019-08-26)
df <- data.frame(lat = runif(20, min = 39.2, max = 39.3),
lng = runif(20, min = -76.6, max = -76.5))
df %>%
leaflet() %>%
addTiles() %>%
addMarkers()
set.seed(2019-08-26)
df <- data.frame(lat = runif(20, min = 39.2, max = 39.3),
lng = runif(20, min = -76.6, max = -76.5))
df %>%
leaflet() %>%
addTiles() %>%
addMarkers()
set.seed(2019-08-26)
df <- data.frame(lat = runif(20, min = 39.2, max = 39.3),
lng = runif(20, min = -76.6, max = -76.5))
df %>%
leaflet() %>%
addTiles() %>%
addMarkers()
# Chunk 2
set.seed(2019-08-26)
df <- data.frame(lat = runif(20, min = 39.2, max = 39.3),
lng = runif(20, min = -76.6, max = -76.5))
df %>%
leaflet() %>%
addTiles() %>%
addMarkers()
library(leaflet)
my_map <- leaflet() %>%
addTiles() %>%
addMarkers(lat=39.2980803, lng=-76.5898801,
popup="Jeff Leek's Office")
my_map
set.seed(2019-08-26)
df <- data.frame(lat = runif(20, min = 39.2, max = 39.3),
lng = runif(20, min = -76.6, max = -76.5))
df %>%
leaflet() %>%
addTiles() %>%
addMarkers()
hopkinsIcon <- makeIcon(iconUrl = "http://brand.jhu.edu/content/uploads/2014/06/university.shield.small_.blue_.png",
iconWidth = 31*215/230, iconHeight = 31,
iconAnchorX = 31*215/230/2, iconAnchorY = 16)
hopkinsLatLong <- data.frame(lat = c(39.2973166, 39.3288851, 39.2906617),
lng = c(-76.5929798, -76.6206598, -76.5469683))
hopkinsLatLong %>%
leaflet() %>%
addTiles() %>%
addMarkers(icon = hopkinsIcon)
hopkinsIcon <- makeIcon(iconUrl = "http://brand.jhu.edu/content/uploads/2014/06/university.shield.small_.blue_.png",
iconWidth = 31*215/230, iconHeight = 31,
iconAnchorX = 31*215/230/2, iconAnchorY = 16
)
hopkinsLatLong <- data.frame(lat = c(39.2973166, 39.3288851, 39.2906617),
lng = c(-76.5929798, -76.6206598, -76.5469683))
hopkinsLatLong %>%
leaflet() %>%
addTiles() %>%
addMarkers(icon = hopkinsIcon)
hopkinsSites <- c(
"<a href='http://www.jhsph.edu/'>East Baltimore Campus</a>",
"<a href='https://apply.jhu.edu/visit/homewood/'>Homewood Campus</a>",
"<a href='http://www.hopkinsmedicine.org/johns_hopkins_bayview/'>Bayview Medical Center</a>",
"<a href='http://www.peabody.jhu.edu/'>Peabody Institute</a>",
"<a href='http://carey.jhu.edu/'>Carey Business School</a>"
)
hopkinsLatLong %>%
leaflet() %>%
addTiles() %>%
addMarkers(icon = hopkinsIcon, popup = hopkinsSites)
hopkinsSites <- c(
"<a href='http://www.jhsph.edu/'>East Baltimore Campus</a>",
"<a href='https://apply.jhu.edu/visit/homewood/'>Homewood Campus</a>",
"<a href='http://www.hopkinsmedicine.org/johns_hopkins_bayview/'>Bayview Medical Center</a>",
"<a href='http://www.peabody.jhu.edu/'>Peabody Institute</a>",
"<a href='http://carey.jhu.edu/'>Carey Business School</a>"
)
hopkinsLatLong %>%
leaflet() %>%
addTiles() %>%
addMarkers(icon = hopkinsIcon, popup = hopkinsSites)
df <- data.frame(lat = runif(500, min = 39.25, max = 39.35),
lng = runif(500, min = -76.65, max = -76.55))
df %>%
leaflet() %>%
addTiles() %>%
addMarkers(clusterOptions = markerClusterOptions())
df <- data.frame(lat = runif(20, min = 39.25, max = 39.35),
lng = runif(20, min = -76.65, max = -76.55))
df %>%
leaflet() %>%
addTiles() %>%
addCircleMarkers()
md_cities <- data.frame(name = c("Baltimore", "Frederick", "Rockville", "Gaithersburg",
"Bowie", "Hagerstown", "Annapolis", "College Park", "Salisbury", "Laurel"),
pop = c(619493, 66169, 62334, 61045, 55232,39890, 38880, 30587, 30484, 25346),
lat = c(39.2920592, 39.4143921, 39.0840, 39.1434, 39.0068, 39.6418, 38.9784, 38.9897, 38.3607, 39.0993),
lng = c(-76.6077852, -77.4204875, -77.1528, -77.2014, -76.7791, -77.7200, -76.4922, -76.9378, -75.5994, -76.8483))
md_cities %>%
leaflet() %>%
addTiles() %>%
addCircles(weight = 1, radius = sqrt(md_cities$pop) * 30)
md_cities <- data.frame(name = c("Baltimore", "Frederick", "Rockville", "Gaithersburg",
"Bowie", "Hagerstown", "Annapolis", "College Park", "Salisbury", "Laurel"),
pop = c(619493, 66169, 62334, 61045, 55232,39890, 38880, 30587, 30484, 25346),
lat = c(39.2920592, 39.4143921, 39.0840, 39.1434, 39.0068, 39.6418, 38.9784, 38.9897, 38.3607, 39.0993),
lng = c(-76.6077852, -77.4204875, -77.1528, -77.2014, -76.7791, -77.7200, -76.4922, -76.9378, -75.5994, -76.8483))
md_cities %>%
leaflet() %>%
addTiles() %>%
addCircles(weight = 1, radius = sqrt(md_cities$pop) * 20)
leaflet() %>%
addTiles() %>%
addRectangles(lat1 = 37.3858, lng1 = -122.0595, lat2 = 37.3890, lng2 = -122.0625)
df <- data.frame(lat = runif(20, min = 39.25, max = 39.35),
lng = runif(20, min = -76.65, max = -76.55),
col = sample(c("red", "blue", "green"), 20, replace = TRUE),
stringsAsFactors = FALSE)
df %>%
leaflet() %>%
addTiles() %>%
addCircleMarkers(color = df$col) %>%
addLegend(labels = LETTERS[1:3], colors = c("blue", "red", "green")
md_cities <- data.frame(name = c("Baltimore", "Frederick", "Rockville", "Gaithersburg",
"Bowie", "Hagerstown", "Annapolis", "College Park", "Salisbury", "Laurel"),
pop = c(619493, 66169, 62334, 61045, 55232,39890, 38880, 30587, 30484, 25346),
lat = c(39.2920592, 39.4143921, 39.0840, 39.1434, 39.0068, 39.6418, 38.9784, 38.9897, 38.3607, 39.0993),
lng = c(-76.6077852, -77.4204875, -77.1528, -77.2014, -76.7791, -77.7200, -76.4922, -76.9378, -75.5994, -76.8483))
md_cities %>%
leaflet() %>%
addTiles() %>%
addCircles(weight = 5, radius = sqrt(md_cities$pop) * 20)
md_cities <- data.frame(name = c("Baltimore", "Frederick", "Rockville", "Gaithersburg",
"Bowie", "Hagerstown", "Annapolis", "College Park", "Salisbury", "Laurel"),
pop = c(619493, 66169, 62334, 61045, 55232,39890, 38880, 30587, 30484, 25346),
lat = c(39.2920592, 39.4143921, 39.0840, 39.1434, 39.0068, 39.6418, 38.9784, 38.9897, 38.3607, 39.0993),
lng = c(-76.6077852, -77.4204875, -77.1528, -77.2014, -76.7791, -77.7200, -76.4922, -76.9378, -75.5994, -76.8483))
md_cities %>%
leaflet() %>%
addTiles() %>%
addCircles(weight = 1, radius = sqrt(md_cities$pop) * 20)
leaflet() %>%
addTiles() %>%
addRectangles(lat1 = 37.3858, lng1 = -122.0595, lat2 = 37.3890, lng2 = -122.0625)
df <- data.frame(lat = runif(20, min = 39.25, max = 39.35),
lng = runif(20, min = -76.65, max = -76.55),
col = sample(c("red", "blue", "green"), 20, replace = TRUE),
stringsAsFactors = FALSE)
df %>%
leaflet() %>%
addTiles() %>%
addCircleMarkers(color = df$col) %>%
addLegend(labels = LETTERS[1:3], colors = c("blue", "red", "green"))
wq_message()
library(swirlify)
wq_message()
wq_message()
wq_message()
wq_command()
wq_command()
add_to_manifest()
test_lesson()
demo_lesson()
2 + 2
get_current_lesson()
new_lesson("Lesson 2", "My First Course")
wq_multiple()
wq_multiple()
add_to_manifest()
test_lesson()
demo_lesson()
wq_figure
wq_figure()
demo_lesson()
add_to_manifest()
get_current_lesson()
get_current_lesson()
library(swirlify)
get_current_lesson()
get_current_lesson()
test_lesson()
demo_lesson()
wq_figure()
demo_lesson()
shiny::runApp('GitHub/dp_wk4/Shiny_Assignment/dp_wk4_assign_bradford')
runApp()
runApp('GitHub/dp_wk4/Shiny_Assignment/dp_wk4_assign_bradford')
runApp('GitHub/dp_wk4/Shiny_Assignment/dp_wk4_assign_bradford')
runApp('GitHub/dp_wk4/Shiny_Assignment/dp_wk4_assign_bradford')
?addPolygons
runApp('GitHub/dp_wk4/Shiny_Assignment/dp_wk4_assign_bradford')
runApp('GitHub/dp_wk4/Shiny_Assignment/dp_wk4_assign_bradford')
runApp('GitHub/dp_wk4/Shiny_Assignment/dp_wk4_assign_bradford')
runApp('GitHub/dp_wk4/Shiny_Assignment/dp_wk4_assign_bradford')
runApp('GitHub/dp_wk4/Shiny_Assignment/dp_wk4_assign_bradford')
runApp()
runApp('GitHub/dp_wk4/Shiny_Assignment/dp_wk4_assign_bradford')
runApp('GitHub/dp_wk4/Shiny_Assignment/dp_wk4_assign_bradford')
shiny::runApp('GitHub/dp_wk4/Shiny_Assignment/dp_wk4_assign_bradford')
shiny::runApp('GitHub/dp_wk4/Shiny_Assignment/dp_wk4_assign_bradford')
runApp('GitHub/dp_wk4/Shiny_Assignment/dp_wk4_assign_bradford')
shiny::runApp('GitHub/dp_wk4/Shiny_Assignment/dp_wk4_assign_bradford')
shiny::runApp('GitHub/dp_wk4/Shiny_Assignment/dp_wk4_assign_bradford')
shiny::runApp('GitHub/dp_wk4/Shiny_Assignment/dp_wk4_assign_bradford')
crime_dat <- read.csv("crime_data_2014.csv", stringsAsFactors = FALSE)
crime_dat$GEOID <- formatC(crime_dat$GEOID, width = 5, format = "d", flag = "0")
setwd("~/GitHub/dp_wk4/Shiny_Assignment/dp_wk4_assign_bradford")
crime_dat <- read.csv("crime_data_2014.csv", stringsAsFactors = FALSE)
crime_dat$GEOID <- formatC(crime_dat$GEOID, width = 5, format = "d", flag = "0")
head(crime_dat)
head(crime_dat)
runApp()
getwd()
